from sentence_transformers import SentenceTransformer
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch
import random
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import mean_squared_error
import yaml

def SAT_Text():
  BOT_NAME = "خود سے لگاؤ"
  return {
      "BOT_NAME": "خود سے لگاؤ",
  "happiness": [
      "اچھی",
      "خوش",
      "خوش",
      "مسکراتے ہوئے",
      "بہترین",
      "خوش",
      "اچھی",
      "بہتر",
      "جی ہاں",
      "ہاں",
      "ہاں",
  ],
  "sadness": ["خراب", "پریشان", "اداس", "اداس", "پریشان", "پریشان", "نہیں", "نہیں"],

  "friendly" : ["دوست", "دوست", "مباشرت", "ہاں", "ہاں", "ہاں", "نہیں"],

  "formal": [
      "آفیشل",
      "رسمی",
      "نہیں",
      "نہیں",
      "ڈرائنگ",
  ],

  "negative_verbs" : ["نہیں ہے", "نہیں کرتا", "نہیں کرتا", "نہیں کرتا", "نہیں کرتا"],

  "yes": ["ہاں", "ہاں", "ہاں", "ٹھیک ہے", "ٹھیک ہے", "میں کروں گا", "میں کروں گا"],

  "no" : ["نہیں" ,"نہیں" ,"نہیں"],

  "positive_emotions": ["Happy", "Loving"],

  "negative_emotions": [
      "Angry",
      "Anxious",
      "Ashamed",
      "Disappointed",
      "Disgusted",
      "Envious",
      "Guilty",
      "Insecure",
      "Sad",
      "Jealous",
  ],

  "recent": [
      "حال ہی میں",
      "تازگی",
      "حال ہی میں",
      "نئی",
      "بند کریں",
      "نئی",
      "حال ہی میں",
      "حال ہی میں",
      "حال ہی میں",
      "حال ہی میں",
      "حال ہی میں",
      "حال ہی میں",
      "ان دنوں",
      "تاز",
  ],

  "long_time": [
      "بہت",
      "پہلے",
      "پرانا وقت",
      "پرانا",
      "بہت عرصہ پہلے",
      "ماضی",
      "ماضی میں",
      "ایک طویل وقت پہلے",
      "بہت عرصہ پہلے",
      "کافی دیر ہوئی",
      "پہلے",
  ],


  "formality": [
      "کیا آپ چاہتے ہیں کہ میں آپ سے باضابطہ یا دوستانہ بات کروں؟",
      "آپ ایک دوسرے سے کیسے بات کرنا پسند کرتے ہیں؟",
      "آپ چاہیں گے کہ میں آپ سے کیسے بات کروں؟"
  ],

  "name_lst" : [
      "آپ کا نام کیا ہے؟",
      "کیا آپ مجھے اپنا نام بتا سکتے ہیں؟",
      "مجھے تمہیں کیا پکارنا چاہے؟",
      "کیا میں آپ کا نام جان سکتا ہوں؟ ",
  ],


  "greeting": [
      "ہیلو",
      "ہیلو . میں آپ کو بہتر محسوس کرنے میں مدد کرنا چاہتا ہوں .",
      "ہیلو",
      "ہیلو و ہیلو",
      "ہیلو، مجھے آپ کی مدد کرکے خوشی ہوئی ",
      "ہیلو، میں آپ کی مدد کرنا چاہتا ہوں ",
      "ہیلو، مجھے خوشی ہے کہ ہم بات کر رہے ہیں",
      "ہیلو اچھا وقت",
      "ہیلو، مجھے خوشی ہے کہ آپ مجھ سے بات کر رہے ہیں",
      "ہیلو میرے دوست",
      f"ہیلو. من {BOT_NAME} هستم و دوست دارم کمکت کنم.",
      "آپ سے مل کر خوشی ہوئ",
      " .ہیلو. مجھے آپ کو بہتر محسوس کرنے میں مدد کرنے دیں",
      "ہیلو، میں آپ کی مدد کرنا چاہتا ہوں",
      " ہیلو،  آپ سے بات کر کے اچھا لگا.",
      "ہیلو، آپ کا وقت اچھا گزرے",
      " ہیلو، مجھے خوشی ہے کہ آپ مجھ سے بات کر رہے ہیں",
      "ہیلو میرے پیارے دوست",
      "ہیلو، میرے پیارے دوست ",

  ],

  "feeling": [
    "پیارے YU، آپ کیسے ہیں؟",
      "پیارے آپ کیسے ہیں",
      "آپ کتنے اچھے ہیں؟"
      "آپ کیسے ہو",
      "پیارے یو، آج آپ کیسی ہیں؟",
      "Y آج آپ کیسی ہیں؟",
      "پیارے YU، آپ کیسے ہیں؟",
      "Y آج آپ کیسی ہیں؟",
      "پیارے YU، آپ کیسے ہیں؟",
      "آج آپ خوش ہیں یا اداس؟",
      "پیارے YU، آپ میرے دوست کیسے ہیں؟",
      "کیسی ہو پیاری یو یو؟",
      "پیارے یو، آج آپ کیسی ہیں؟",
      "کیسی ہو پیاری یو یو؟",
      "کیسی ہو پیاری یو یو؟",
      "پیارے یو، آج آپ خوش ہیں یا اداس؟",
  ],

  "emotion_verifier": [
      "کیا آپ X محسوس کرتے ہیں؟",
      "کیا آپ X محسوس کرتے ہیں؟",
      "کیا آپ کو لگتا ہے کہ آپ Z ہیں؟",
      "کیا آپ Z کی طرح محسوس کرتے ہیں؟",

  ],

  "tell_emotion": [
      "خوشی یا غم؟",
      "کیا آپ خوشی محسوس کرتے ہیں یا اداس؟",
      "میں نے نہیں پکڑا۔ ",
      "براہ کرم مجھے زیادہ واضح طور پر بتائیں، کیا آپ اداس ہیں یا خوش؟",
      "میں نے احساس محسوس نہیں کیا۔ ",
      "اپ کیسا محسوس کر رہے ہیں ",
      "براہ کرم مزید مخصوص رہیں۔  خوشی یا غم؟ ",
      "اپ کیسا محسوس کر رہے ہیں  خوشی یا غم؟",
      "میں آپ کا احساس نہیں سمجھا۔  خوشی یا غم؟",
      "کیا آپ کو غم ہے یا خوشی؟ ",
      "کیا آپ کو غم ہے یا خوشی؟ ",
  ],

  "if_need_any_protocols": [
      "Y کیا آپ کو اپنی کرنسی کو بہتر بنانے کے لیے ورزش کی ضرورت ہے؟",
      "پیارے YU، کیا آپ کو اپنی کرنسی کو بہتر بنانے کے لیے ورزش کی ضرورت ہے؟",
      "کیا آپ کو لگتا ہے کہ آپ کو کچھ ورزش کی ضرورت ہے؟",
      "پیارے YU، کیا آپ اپنی کرنسی کو بہتر بنانے کے لیے کوئی ورزش کرنا چاہیں گے؟",
      "پیارے YU، کیا آپ کو ضرورت ہے کہ میں آپ کو ایک مشق سے متعارف کراؤں؟",
      "Y کیا آپ کچھ ورزش کرنا پسند کرتے ہیں؟",
      "پیارے YU، کیا آپ محسوس کرتے ہیں کہ آپ کو اپنی کرنسی کو بہتر بنانے کے لیے ورزش کی ضرورت ہے؟",
      "Y کیا آپ محسوس کرتے ہیں کہ ورزش کرنے سے آپ بہتر محسوس کرتے ہیں؟",
      "پیارے YU، کیا آپ محسوس کرتے ہیں کہ آپ کو اپنی کرنسی کو بہتر بنانے کے لیے ورزش کرنے کی ضرورت ہے؟",
      "پیارے YU، کیا آپ کو اپنی کرنسی کو بہتر بنانے کے لیے کچھ ورزش کرنے کی ضرورت ہے؟",
      "کیا آپ کو اپنی کرنسی کو بہتر بنانے کے لیے ورزش کرنے کی ضرورت ہے؟",
      "پیارے YU، کیا آپ کو اپنی کرنسی کو بہتر بنانے کے لیے کچھ ورزش کرنے کی ضرورت ہے؟",
      "کیا آپ کو اپنے موڈ کو بہتر بنانے کے لیے ورزش کرنے کی ضرورت ہے؟",
      "پیاری، کیا آپ کو لگتا ہے کہ آپ کو ورزش کی ضرورت ہے؟",
      "کیا آپ محسوس کرتے ہیں کہ آپ کو اپنی کرنسی کو بہتر بنانے کے لیے ورزش کرنے کی ضرورت ہے؟",
      "پیارے، کیا آپ اپنا موڈ بہتر کرنے کے لیے کوئی ورزش کرنا چاہیں گے؟",
      "کیا آپ اپنی کرنسی کو بہتر بنانے کے لیے کچھ ورزش کرنا چاہیں گے؟",
      "پیارے YU، کیا آپ کو ایک مشق کی ضرورت ہے جو آپ کو متعارف کرایا جائے؟",
      "کیا آپ کو اپنی کرنسی کو بہتر بنانے کے لیے ورزش کا مشورہ دینے کی ضرورت ہے؟",
      "کیا آپ کو لگتا ہے کہ آپ کو بہتر ہونے کے لیے ورزش کرنے کی ضرورت ہے؟"
  ],


  "event": [
      "یہ سن کر افسوس ہوا کہ آپ کی طبیعت ٹھیک نہیں ہے۔ ",
      "کیا آپ کو اداس کرنے کے لیے کچھ ہوا ہے؟ ",
      "کیا آپ کو اداس کرنے کے لیے کچھ خاص ہوا ہے؟ ",
      "کیا آپ کو پریشان کرنے کے لیے کوئی خاص بات ہوئی ہے؟",
      "کیا کوئی خاص بات ہے جس نے آپ کو پریشان کیا؟",
      "کیا کوئی ایسی چیز ہے جو آپ کو پریشان کرتی ہے؟",
      "کیا کچھ خاص ہوا جس نے آپ کو اس طرح محسوس کیا؟",
      "کیا کچھ ایسا ہوا جس نے آپ کو ایسا محسوس کیا؟",
      "کیا آپ کو اس طرح محسوس کرنے کی کوئی خاص وجہ ہے؟",
      "کیا کچھ خاص ہوا؟",
      "کیا کچھ خاص ہوا جس نے آپ کو اس طرح محسوس کیا؟",
      "کیا کچھ خاص ہوا جس نے آپ کو اس طرح محسوس کیا؟",
  ],

  "time" : [
      "کیا یہ حال ہی میں ہوا تھا یا بہت پہلے؟",
      "کیا حال ہی میں ایسا ہوا؟",
      "کیا یہ حال ہی میں ہوا ہے؟",
      "کیا یہ کسی ایسی چیز کے لیے ہے جو حال ہی میں ہوا تھا یا بہت پہلے؟",
      "کیا یہ حال ہی میں ہوا ہے؟",
      "کیا حال ہی میں ایسا ہوا؟",
      "کیا یہ بہت عرصہ پہلے ہوا تھا؟",
      "کیا حال ہی میں ایسا ہوا؟",
      "کیا یہ حال ہی میں ہوا ہے؟",
      "کیا یہ حال ہی میں ہوا ہے؟",
      "کیا یہ اس موضوع کے ساتھ ہو رہا ہے جو حال ہی میں ہوا تھا یا کچھ عرصہ پہلے ہوا تھا؟",
      "کیا یہ حال ہی میں ہوا ہے؟",
      "آیا کیا حال ہی میں ایسا ہوا؟",
  ],

  "additionals":  [
      {
      "questions": [
          "کیا آپ کو ایسا لگتا ہے کہ آپ کو کسی اور کا نجات دہندہ بننا ہے؟",
          "کیا آپ کو ایسا لگتا ہے کہ آپ کو کسی اور کا نجات دہندہ بننا ہے؟",
          "کیا آپ کو ایسا لگتا ہے کہ آپ کو کسی اور کا نجات دہندہ بننا ہے؟",
          "کیا آپ کو ایسا لگتا ہے کہ آپ کو کسی اور کا نجات دہندہ بننا ہے؟",
          "کیا آپ کو لگتا ہے کہ آپ کو کسی اور کے لیے نجات دہندہ کا کردار ادا کرنا ہوگا؟",
          "کیا آپ کو لگتا ہے کہ آپ کو کسی اور کے لیے نجات دہندہ کا کردار ادا کرنا ہوگا؟",
          "کیا آپ کو ایسا لگتا ہے کہ آپ کو کسی اور کا نجات دہندہ بننا ہے؟",
          "کیا آپ کو لگتا ہے کہ آپ کو کسی اور کے لیے نجات دہندہ کا کردار ادا کرنا ہوگا؟",
          "کیا آپ کو لگتا ہے کہ آپ کو کسی اور کے لیے نجات دہندہ کا کردار ادا کرنا ہوگا؟",
          "کیا آپ کو لگتا ہے کہ آپ کو کسی دوسرے شخص کی مدد کے لیے نجات دہندہ کا کردار ادا کرنا ہوگا؟",
          "کیا آپ محسوس کرتے ہیں کہ آپ کو کسی دوسرے شخص کو بچانے یا بچانے کے لیے نجات دہندہ کا کردار ادا کرنا ہوگا؟"
          ],
          "YES":[11, 20, 24], "NO":[15]
      },
      {
      "questions": [
          "کیا آپ کو لگتا ہے کہ آپ کسی اور کا شکار ہیں؟",
          "کیا آپ کو لگتا ہے کہ آپ کسی اور کا شکار ہیں؟",
          "کیا آپ کو لگتا ہے کہ آپ کسی اور کے شکار ہیں یا آپ کو تکلیف ہے؟",
          "کیا آپ محسوس کرتے ہیں کہ آپ کسی دوسرے شخص کے ذریعہ شکار یا نقصان پہنچا رہے ہیں؟",
          "کیا آپ کو ایسا لگتا ہے جیسے آپ کسی دوسرے شخص کا شکار ہو؟",
          "کیا آپ محسوس کرتے ہیں کہ آپ کو کسی دوسرے شخص نے تکلیف دی ہے یا نقصان پہنچایا ہے اور آپ کو اس شخص کا شکار سمجھا جاتا ہے؟",
          ],
          "YES":[11, 20, 24], "NO":[15]
      },
      {
      "questions": [
          "کیا آپ محسوس کرتے ہیں کہ آپ کسی اور کے لیے اپنے آپ کو قربان کر رہے ہیں؟",
          "کیا آپ کو لگتا ہے کہ آپ کسی اور کا شکار بن رہے ہیں؟",
          "کیا آپ کسی اور کے لیے شکار کی طرح محسوس کرتے ہیں؟",
          "کیا آپ کو کسی اور کے لیے قربانی کرنے کی طرح لگتا ہے؟",
          "کیا آپ محسوس کرتے ہیں کہ آپ کسی دوسرے شخص کے لیے اپنے آپ کو قربان کر رہے ہیں؟",
          "کیا آپ محسوس کرتے ہیں کہ آپ کسی دوسرے شخص کے لیے اپنے آپ کو قربان کر رہے ہیں؟",
          "کیا آپ کو ایسا لگتا ہے کہ آپ کسی دوسرے شخص کے لیے قربان ہو رہے ہیں؟",
          ],
          "YES":[11, 20, 24], "NO":[15]
      },
      {
      "questions": [
          "کیا آپ کو لگتا ہے کہ آپ کسی اور کو کنٹرول کر رہے ہیں؟",
          "کیا آپ کو لگتا ہے کہ آپ کسی اور کو کنٹرول کر رہے ہیں؟",
          "کیا آپ کو ایسا لگتا ہے کہ آپ کسی اور کو کنٹرول یا ہدایت کر رہے ہیں؟",
          "کیا آپ محسوس کرتے ہیں کہ آپ دوسرے شخص کو کنٹرول یا ہدایت کر رہے ہیں؟",
          "کیا آپ محسوس کرتے ہیں کہ آپ کسی دوسرے شخص کو کنٹرول کر رہے ہیں؟",
          "کیا آپ محسوس کرتے ہیں کہ آپ کسی دوسرے شخص کو کنٹرول یا ہدایت کر رہے ہیں؟",
          "کیا آپ کو ایسا لگتا ہے کہ آپ کسی اور کو کنٹرول یا ہدایت کر رہے ہیں؟",
          "کیا آپ کو ایسا لگتا ہے کہ آپ کسی اور کو کنٹرول یا ہدایت کر رہے ہیں؟",
          ],
          "YES":[11, 20, 24], "NO":[15]
      },
      {
      "questions": [
          "کیا آپ ہمیشہ اپنے آپ کو قصوروار ٹھہراتے ہیں جب کچھ غلط ہو جاتا ہے؟",
          "کیا آپ ہمیشہ اپنے آپ کو قصوروار ٹھہراتے ہیں جب کچھ غلط ہو جاتا ہے؟",
          "کیا آپ ہمیشہ اپنے آپ کو قصوروار ٹھہراتے ہیں جب کچھ غلط ہو جاتا ہے؟",
          "کیا آپ ہمیشہ اپنے آپ کو مورد الزام ٹھہراتے ہیں جب کچھ برا ہوتا ہے؟",
          "کیا آپ ہمیشہ اپنے آپ کو مورد الزام ٹھہراتے ہیں جب کچھ برا ہوتا ہے؟",
          "کیا آپ ہمیشہ اپنے آپ کو مورد الزام ٹھہراتے ہیں جب کچھ برا ہوتا ہے؟",
          "کیا آپ ہمیشہ اپنے آپ کو مورد الزام ٹھہراتے ہیں جب کچھ برا ہوتا ہے؟"
          ],
          "YES":[11, 20, 24], "NO":[15]
      },
      {
      "questions": [
          "کیا آپ نے کبھی اپنے کام میں دوسرے لوگوں کے نقطہ نظر پر غور کیا ہے؟",
          "کیا آپ نے کبھی اپنے کام میں دوسروں کی رائے پر غور کیا ہے؟",
          "کیا آپ نے کبھی اپنے کام میں دوسروں کی رائے پر غور کیا ہے؟",
          "کیا آپ نے اپنا کام کرتے ہوئے کبھی دوسروں کی رائے پر توجہ دی ہے؟",
          "کیا آپ نے کبھی اپنا کام کرنے میں دوسروں کی رائے پر غور کیا ہے؟",
          "کیا آپ نے کبھی اپنی سرگرمیوں میں دوسروں کی رائے پر غور کیا ہے؟",
          "کیا آپ نے کبھی اپنے کام میں دوسرے لوگوں کی رائے کا خیال رکھا ہے؟",
          "کیا آپ نے کبھی اپنے کام میں دوسروں کی رائے پر توجہ دی ہے؟",
          "کیا آپ نے کبھی اپنی سرگرمیوں میں دوسروں کی رائے پر توجہ دی ہے؟"
          ],
          "YES":[15], "NO":[15, 20]
      },
      {
      "questions": [
          "کیا آپ کو لگتا ہے کہ آپ ذاتی بحران کی طرف بڑھ رہے ہیں؟",
          "کیا آپ کو لگتا ہے کہ آپ ذاتی بحران کی طرف بڑھ رہے ہیں؟",
          "کیا آپ کو لگتا ہے کہ آپ ذاتی بحران کے قریب پہنچ رہے ہیں؟",
          "کیا آپ کو لگتا ہے کہ آپ ذاتی بحران سے گزر رہے ہیں؟",
          "کیا آپ محسوس کرتے ہیں کہ آپ ذاتی بحران کے راستے پر ہیں؟",
          "کیا آپ کو لگتا ہے کہ آپ ذاتی بحران کے قریب پہنچ رہے ہیں؟",
          "کیا آپ کو لگتا ہے کہ آپ ذاتی بحران کی طرف بڑھ رہے ہیں؟",
          "کیا آپ محسوس کرتے ہیں کہ آپ ذاتی بحران کے راستے پر ہیں؟",
          "کیا آپ کو لگتا ہے کہ آپ ذاتی بحران کے قریب پہنچ رہے ہیں؟"
          ],
          "YES":[15, 25], "NO":[15]
      }
  ],
  # Sara's Project
  "error": [
      "میرے خیال میں کوئی مسئلہ ہے۔ ",
      "میرے خیال میں ایک مسئلہ ہے؛ ",
      "میرے خیال میں ایک مسئلہ ہے؛ ",
      "ایسا لگتا ہے کہ کوئی مسئلہ ہے؛ ",
      "میرے خیال میں ایک مسئلہ ہے؛ ",
      "ایسا لگتا ہے کہ کوئی مسئلہ پیدا ہوگیا ہے۔ ",
      "ایسا لگتا ہے کہ کچھ غلط ہو گیا ہے۔ ",
      "لگتا ہے کوئی مسئلہ ہے۔ ",
      "شاید کوئی مسئلہ ہے۔ ",
      "ایسا لگتا ہے کہ کوئی مسئلہ ہے۔ "
  ],

  "neutral_verifier": [
      "ایسا لگتا ہے کہ آپ کو کوئی غمگین یا خوشی کا احساس نہیں ہے۔ ",
      "مجھے لگتا ہے کہ آپ کو کوئی خاص احساس نہیں ہے۔ ",
      "ایسا لگتا ہے کہ آپ کو کوئی خاص احساس نہیں ہے۔ ",
      "مجھے لگتا ہے کہ آپ کو ابھی مثبت اور منفی کا احساس نہیں ہے۔ ",
      "مجھے ایسا لگتا ہے کہ آپ کو کوئی خاص جذبات نہیں ہیں۔ ",
      "ایسا لگتا ہے کہ آپ کو ابھی کوئی غمگین یا خوشی کا احساس نہیں ہے۔ ",
      "مجھے لگتا ہے کہ آپ کو کوئی خاص احساس نہیں ہے۔ ",
      "ایسا لگتا ہے کہ آپ کو کوئی خاص احساس نہیں ہے۔ ",
      "مجھے لگتا ہے کہ آپ کو ابھی مثبت یا منفی احساس نہیں ہے۔ ",
      "ایسا لگتا ہے کہ آپ کو کوئی خاص احساس نہیں ہے۔ "
  ],
  "yes_no": [
      "براہ کرم مجھے ہاں یا نہیں بتائیں۔",
  ],

  "thanks": [
      "مجھ سے بات کرنے کے لئے آپ کا شکریہ :)",
      "میں آپ سے بات کرنے پر خوش تھا۔",
      "ہماری اس گفتگو کا شکریہ",
      "مجھے بتانے کے لئے آپ کا شکریہ۔",
      "مجھے بتانے میں خوشی ہوئی۔",
      "مجھ سے یہ گفتگو کرنے کا شکریہ۔",
      "اپنے جذبات کا اظہار کرنے کے لئے آپ کا شکریہ۔",
      "مجھے آپ سے بات کرتے ہوئے خوشی ہوئی۔"
  ],

  "additional_question": [
      "کیا میں دوبارہ سوال پوچھ سکتا ہوں؟",
      "کیا آپ مجھے دوبارہ پوچھنے کی اجازت دیتے ہیں؟",
      "کیا میں دوبارہ سوال پوچھ سکتا ہوں؟",
      "کیا میں دوبارہ سوال پوچھ سکتا ہوں؟",
      "میں اب بھی کچھ پوچھتا ہوں؟"
  ],

  "exercise10_distressing": [
      "کیا مندرجہ ذیل مشق آپ کو پریشان کرتی ہے؟",
      "کیا درج ذیل ورزش آپ کو پریشان کرتی ہے؟ ",
      "مندرجہ ذیل مشق آپ کو پریشان کرتی ہے؟",
      "کیا مندرجہ ذیل ورزش بہتر نہیں ہے؟"
  ],

  "exercise_doing": [
      "براہ کرم مندرجہ ذیل مشق کریں۔",
      "مندرجہ ذیل مشق کرنے کی کوشش کریں۔",
  "براہ کرم وہ مشق کرو جو میں آپ کو بتاتا ہوں۔",
      "لطفا مندرجہ ذیل مشق کرنے کی کوشش کریں۔",
      "براہ کرم مندرجہ ذیل مشق کریں۔"
  ],

  "exercise_feeling": [
      "براہ کرم یہ کریں اور پھر مجھے بتائیں کہ کیا یہ بہتر ہے؟",
      "براہ کرم مجھے ورزش کے بعد بتائیں، کیا آپ بہتر محسوس کرتے ہیں؟",
      "کیا آپ ورزش کے بعد بہتر محسوس کرتے ہیں؟",
      "کیا آپ ورزش کرنے کے بعد بہتر محسوس کرتے ہیں؟",
      "مجھے بتائیں، کیا آپ ورزش کے بعد بہتر محسوس کرتے ہیں؟",
      "کیا آپ نے ورزش کرنے کے بعد بہتر محسوس کیا؟",
      "کیا آپ ورزش کرنے کے بعد بہتر محسوس کرتے ہیں؟"
  ],

  "more_exercises": [
      "کیا آپ چاہتے ہیں کہ میں ایک اور مشق تجویز کروں؟",
      "کیا آپ چاہتے ہیں کہ میں ایک اور مشق تجویز کروں؟",
      "کیا آپ کو ضرورت ہے کہ میں دوبارہ ورزش کا مشورہ دوں؟",
      "کیا آپ چاہتے ہیں کہ میں ایک اور مشق تجویز کروں؟",
      "کیا آپ کو ضرورت ہے کہ میں کوئی اور ورزش تجویز کروں؟",
      "کیا آپ چاہتے ہیں کہ میں آپ کو ایک اور ورزش پیش کروں؟",
      "کیا آپ ایک اور ورزش کرنا چاہتے ہیں؟",
  ],


  "protocol_titles": [
        "کسی خاص ورزش کی ضرورت نہیں ہے۔"
              "بچپن کی یادوں کی یاد دلانا",
              "بچے کو گلے لگانا اور تسلی دینا",
              "ایک پیار بھرا گانا گانا",
              "بچے کےلیے پیار اور دیکھ بھال کے احساس کا اظہار",
              "بچے کی حمایت اور دیکھ بھال کا عزم",
              "ہماری جذباتی دنیا کی بازیابی",
              "بچے کے ساتھ محبت کا رشتہ برقرار رکھیں اور زندگی کا جذبہ پیدا کریں",
              "فطرت کی نوعیت سے لطف اٹھائیں",
              "موجودہ منفی جذبات پر قابو پانا",
              "ماضی کے درد کو دور کریں",
              "جان بوجھ کر ہنسنے کے لئے پٹھوں میں نرمی اور خوشگوار چہرہ",
              "خود پر فتح کی ہنسی",
              "اپنے بچپن کے ساتھ ہنسنا",
              "جان بوجھ کر ہنسی",
              "اپنے خیالات کو تبدیل کرنا سیکھیں۔",
              "اپنے ماضی کے درد سے خوش رہنا سیکھیں۔",
              "ذاتی اختلافات کے نمونوں کی شناخت کریں۔",
              "مزید تعمیری اقدامات کے لئے منصوبہ بندی کرنا",
              "اپنا ہمدردانہ نمونہ تلاش کریں اور اس کے ساتھ لنک کریں۔",
              "تخلیقی صلاحیتوں کو بڑھانے کے لئے اپنے سخت عقائد کو اپ ڈیٹ کرنا",
              "زور دینے والے اظہار کی مشق کریں",
              "ایک سانحے سے نمٹنے کے لیے ہنسی کا استعمال",
              "آہستہ آہستہ اپنے اندرونی کام کرنے والے ماڈل اور اپنے بنیادی دیکھ بھال کرنے والوں اور بنیادی ماحول کے اثر و رسوخ سے آگاہ ہونے کی کوشش کریں",
              "اندرونی پریشان کن احساسات کی شناخت اور کنٹرول کرنا",
              "ذاتی بحرانوں کو حل کرنا",
              "ہنگامی صورتحال کے وقت حقیقی اور آزاد خود کی دریافت کرنا",
          ],

  "protocols" : [
              ["کوئی مشق کی ضرورت نہیں ہے۔"],

              ["کسی پرسکون جگہ پر اپنی خوش اور غمگین تصاویر دیکھیں۔ بچپن کی مثبت اور منفی یادیں اور ابتدائی خاندانی تعلقات کو یاد کریں۔"
            ],

              [
                  "al- الف:",
                    "(1) بند آنکھوں سے اپنی خوش تصویر یا اوتار کا تصور کریں اور اپنے قریب کے بچے کا تصور کریں۔",
                    "(2) اب تصور کریں کہ آپ نے بچے کو گلے لگا لیا ہے۔",
                    "(3) پھر تصور کریں کہ آپ بچے کے ساتھ کھیل رہے ہیں ، مثلاً وہ کھیل جو آپ بچپن میں کھیلتے تھے۔",
                    "(4) آخر میں تصور کریں کہ آپ بچے کے ساتھ ناچ رہے ہیں۔",
                    "اس بارے میں سوچیں کہ آپ (1) سے (4) تک ہر ایک قدم پر کیسا محسوس کرتے ہیں۔",
                  "b2- ب:",
            "(1) بند آنکھوں کے ساتھ، اپنی اداس تصویر یا اوتار کو اپنے قریب کے بچے کی طرح تصور کریں۔",
                    "(2) اب تصور کریں کہ آپ بچے کو گلے لگا کر تسلی دے رہے ہیں۔",
                    "(3) اپنی آنکھیں کھولیں، اپنے چہرے پر ورچوئل رئیلٹی ہیڈسیٹ لگائیں۔",
                    "(الف) اپنے اوتار پر منفی جذبات (اضطراب، غصہ، خوف یا بیزاری) ڈالیں۔",
                    "(ب) پھر خودکار جذبات پر کلک کریں اور اپنے بچے کے اوتار کو دیکھ کر تصور کریں کہ آپ بچے کو تسلی دے رہے ہیں، جس سے بچہ خوش ہو جائے گا اور آخرکار رقص کرے گا۔",
                    "اس بارے میں سوچیں کہ آپ (1) سے (3) تک ہر ایک قدم میں کیسا محسوس کرتے ہیں۔",
              ],

              [
            "گھر، کام اور اپنے بٹوے میں ڈسپلے کرنے کے لیے خوشی کی تصویر کی کاپیاں پرنٹ کریں۔ اپنے فون، لیپ ٹاپ اور دیگر ڈیجیٹل آلات پر ڈیجیٹل امیج کو بیک گراؤنڈ کے طور پر سیٹ کرنے پر غور کریں۔ اپنی پسند کا ایک خوشگوار گانا منتخب کریں۔ اور گرمجوشی کے جذبات کو جنم دیں۔ , پیار، پیار۔ گانا یاد رکھیں اور اپنے روزمرہ کے معمولات میں جتنی بار ہو سکے گانا گانا گانا ایک خوشگوار تصویر یا اوتار کو بانڈ کرنے کے طریقے کے طور پر دیکھیں۔ اپنے ذہن میں بچے کے ساتھ گہرے جذباتی رہیں۔ خاموشی سے شروع کریں؛ پھر، وقت گزرنے کے ساتھ، اپنے جسم کا زیادہ استعمال کرتے ہوئے اپنی آواز کو بلند ہونے دیں (مثلاً اپنے کندھوں یا بازوؤں کو ہلائیں، اور اپنی بھنویں اٹھائیں اور نیچے کریں)۔ تصور کریں کہ اس طرح، والدین کی طرح، آپ ایک پرجوش اور محبت بھری گفتگو کرتے ہیں اور خوشی سے بچے کے ساتھ ناچتے اور کھیلتے ہیں۔"
            ],
              [
          "جب آپ کسی خوش کن تصویر یا اوتار پر اپنے دل کی گہرائیوں سے مسکراتے ہیں، تو اپنے بچے سے اونچی آواز میں کہیں، 'میں تم سے بہت پیار کرتا ہوں اور مجھے تمہارا بہت خیال ہے۔"
            ],
              [
                  "اس مشق میں ہم بچے کی اس طرح دیکھ بھال کرنا شروع کرتے ہیں جیسے وہ ہمارا اپنا ہو۔ پہلے ہم اپنے جذبات کو بچے سے منسوب کرتے ہیں اور پھر اپنے طور پر، ایک خاص وقت اور جگہ پر عزم کے ساتھ شروع کرتے ہیں۔ دھیمی آواز میں پڑھنے کے بعد، ہم پختہ آواز میں یہ عہد کرتا ہوں: 'اب سے، میں اس بچے کے لیے ایک وقف اور محبت کرنے والے والدین کے طور پر کام کرنے کی کوشش کروں گا اور ہر ممکن طریقے سے اس کی مستقل اور پورے دل سے دیکھ بھال کروں گا۔' میں اس بچے کی صحت اور جذباتی نشوونما کے لیے ہر ممکن کوشش کروں گا۔"
              ],

              [
          "تخیل کے ذریعے یا پینٹنگ کے ذریعے، اپنی جذباتی دنیا کے بارے میں ایک گھر کے طور پر سوچیں جس میں ترک شدہ حصوں کو آپ مکمل طور پر دوبارہ تعمیر کریں گے۔ نئے گھر کا مقصد مصیبت کے وقت بچے کے لیے ایک محفوظ پناہ گاہ اور ایک محفوظ بنیاد ہے۔ زندگی کے چیلنجوں کا سامنا کرنے کے لیے۔ نیا گھر اور اس کا باغ روشن اور دھوپ والا ہے۔ اس طرح ہم اس ماحول میں اپنی اٹیچمنٹ کی مشقیں کریں گے۔ نئے گھر کا نامکمل تہہ خانہ متروک مکان کی باقیات ہے اور اس میں ہمارے منفی جذبات شامل ہیں۔ جب آپ منفی جذبات کو برداشت کرتے ہیں، تو تصور کریں کہ بچہ تہہ خانے میں پھنسا ہوا ہے، لیکن آہستہ آہستہ تہہ خانے کا دروازہ کھولنا سیکھ سکتا ہے، روشنی والے کمروں میں جانا، اور بڑوں کے ساتھ دوبارہ ملنا سیکھ سکتا ہے۔"
          ],
              [
                "الف: چند مختصر جملے منتخب کریں، مثال کے طور پر، <<تم میرے خوبصورت بچے ہو>> یا <<میرا پیار۔>> کسی خوش کن تصویر یا اوتار کو دیکھتے ہوئے اسے آہستہ سے، اونچی آواز میں کہیں، کم از کم پانچ بار کہیں۔ پھر گانا۔ آپ کا پسندیدہ گانا کم از کم پانچ بار۔",
  "ب: آئینے میں دیکھتے وقت، اپنی تصویر کو بچپن میں تصور کریں (یعنی آپ کے جذباتی نفس)، پھر اپنے پہلے سے منتخب کردہ گانے کو اونچی آواز میں گانا شروع کریں۔ (اگر آپ کو آئینے میں کسی بچے کا تصور کرنا مشکل ہو تو",
  "ج: آئینے کے سامنے اپنے بچے کی خوشی کی تصویر بنائیں اور آئینے میں اپنے خوش بچے کی تصویر دیکھتے ہوئے ورزش کریں۔ اسے دن بھر کریں۔ مثال کے طور پر کام پر جاتے ہوئے یا رات کا کھانا پکاتے وقت، ان کو مربوط کرنے کے لیے آپ کی نئی زندگی میں۔ ایک بار جب آپ کا پسندیدہ گانا گانا عادت بن جاتا ہے، تو یہ مثبت اثرات کو تقویت دینے اور جذبات کو منظم کرنے کا ایک مؤثر ذریعہ بن جاتا ہے۔"
              ],


              [
          "اپنے بچے میں فطرت سے لگاؤ ​​پیدا کرنا خوشی کو بڑھانے اور منفی جذبات کو کم کرنے کا ایک مؤثر طریقہ ہے۔ کسی باغ، پارک یا جنگل میں جائیں۔ درخت کی تعریف کرنے میں کم از کم 5 منٹ گزاریں اور اس کی حقیقی خوبصورتی کی تعریف کرنے کی کوشش کریں جس کا آپ نے کبھی تجربہ نہیں کیا۔ اس عمل کو دہرائیں، بشمول فطرت کے دیگر پہلوؤں (جیسے آسمان، ستارے، پودے، پرندے، دریا، سمندر، آپ کا پسندیدہ جانور) جب تک کہ آپ فطرت سے لگاؤ ​​محسوس نہ کریں جو آپ کے جذبات کو منظم کرنے میں مدد کرتا ہے۔ یہ آپ کی مدد کرے گا۔ کورس ختم ہونے کے بعد فطرت میں زیادہ وقت گزاریں۔"
            ],

            [
          "بند آنکھوں کے ساتھ، ایک ناخوش تصویر یا اوتار کا تصور کریں اور اپنے منفی جذبات کو ناخوش تصویر یا اوتار پر پیش کریں۔",
          "یہ کرتے ہوئے:",
          "(1) بچے کو اونچی آواز میں یقین دلائیں۔",
          "(2) اپنے چہرے، گردن یا سر کی مالش کریں۔",
          "ان اقدامات کو اس وقت تک دہرائیں جب تک کہ آپ سکون محسوس نہ کریں۔",
              ],
      [
          "آنکھیں بند کر کے، بچپن کے دردناک واقعہ کو یاد کریں، جیسے جذباتی یا جسمانی زیادتی یا کسی اہم شخصیت کا کھو جانا، ان تمام تفصیلات کے ساتھ جو آپ کو اب بھی یاد ہیں۔ اس بچے کا چہرہ منتخب کریں جس میں آپ ماضی میں تھے پریشان تصویر کے ساتھ یا اوتار۔ جب آپ آنکھیں بند کرکے بے بسی، ذلت اور غصے کے منسلک احساسات کو یاد کرتے ہیں، تو تصور کریں کہ آپ اپنے موجودہ خود کو ایک اچھے والدین کی طرح مداخلت کرتے ہیں۔",
          "اپنی جوانی کی تصویر بنائیں:",
          "(1) کسی اچھے والدین کی طرح جس کا بچہ مصیبت میں ہے، اپنے بچے سے جلدی سے رجوع کریں۔",
          "(2) آپ ہر ایک ایجنٹ کے سامنے اونچی آواز میں کھڑے ہو کر بچے کو اونچی آواز میں یقین دلاتے ہیں کہ اب آپ اسے بچانے آ رہے ہیں، مثال کے طور پر: <<آپ میرے بچے کو کیوں مار رہے ہیں؟>> اور مثال کے طور پر اونچی آواز میں یہ کہہ کر بچے کی حمایت کرنا: <<شہید، میں انہیں مزید آپ کو تکلیف نہیں دینے دوں گا۔>>",
          "(3) اپنے چہرے، گردن یا سر کی مالش کرکے اپنے بچے کو تصور کے ساتھ گلے لگائیں۔",
          "دہرائیں (1)، (2)، (3) جب تک کہ آپ پرسکون اور راحت محسوس نہ کر لیں اور دھچکے میں مہارت حاصل کر لیں۔",
  ],
              [
          "اس مشق کے لیے، بچوں کی طرح کام کرنے کی کوشش کریں: اپنے چہرے اور جسم کے پٹھوں کو آرام دیں، اپنا منہ کھولیں، اور ہنستے ہوئے (یا کم از کم مسکراتے ہوئے) اپنا پسندیدہ گانا گائیں۔"
              ],
              ["کچھ کرنے کے فورا. بعد ، مثال کے طور پر ، ہوم ورک کرنے ، پڑوسی سے بات کرنا یا مضمون پڑھنے ، اور اس خیال کے ساتھ کہ یہ ایک کامیابی ہے ، پھر جب آپ بہتر ہوجائیں تو کم از کم دس سیکنڈ کے لئے ہنسنا شروع کردیں۔"],
              ["اپنی خوش کن تصویر یا اوتار دیکھیں ، پھر کم از کم دس سیکنڈ تک ہنسنا شروع کریں۔اس عمل کو کم از کم تین بار دہرائیں۔"],
          [
          "جب آپ اکیلے ہوں تو اپنا منہ تھوڑا سا کھولیں، اپنے چہرے کے پٹھوں کو آرام دیں، اپنی بھنویں اٹھائیں، پھر آہستہ آہستہ اور مسلسل درج ذیل آوازوں میں سے ایک کو دہرائیں، جن میں سے ہر ایک کم سے کم توانائی استعمال کرتی ہے، وہ کہتا ہے: <<ہا، ہا، ہا، ہا>> یا <<ہا، ہا، ہا، ہا>>؛ یا <<ہو، ہو، ہو، ہو>>؛ یا <<ارے، ہیے، ہیے، ہیے>> یا <<یا، یا، یا، یا>>۔ اگر آپ کو کسی چیز کی ضرورت ہو اس کے بارے میں ہنسیں، آپ اس مشق کے احمقانہ پن پر ہنس سکتے ہیں! ایک بار جب یہ مستقل، جان بوجھ کر ہنسنا عادت بن جائے، تو آپ اسے اپنی شخصیت اور انداز کے مطابق ڈھال سکتے ہیں تاکہ ہنسنے کا ایک منفرد انداز پیدا ہو۔ خود کو تخلیق کریں۔"
              ],
              [
          "سیاہ گلدان کو گھوریں۔ جس لمحے آپ کا خیال بدل جاتا ہے اور آپ کو دو سفید چہرے نظر آتے ہیں، ایک بالغ اور ایک بچہ، ایک دوسرے کی طرف دیکھتے ہوئے (IT, ST, PT) ہنستے ہیں یا کم از کم ایک منٹ کے لیے مسکراتے ہیں۔ چہرے اور ہنسیں یا کم از کم ایک منٹ کے لیے مسکرائیں جب آپ کا خیال بدل جاتا ہے اور آپ کو سیاہ گلدان نظر آتا ہے (IT, ST)۔"
      ],
              [
          "ماضی میں پیش آنے والے دردناک واقعے کا تصور کریں (یہ ایک حالیہ واقعہ ہو سکتا ہے جس کے ساتھ آپ نے جدوجہد کی ہو یا آپ کے بچپن میں ایسا دردناک واقعہ پیش آیا ہو جسے آپ نے طویل عرصے تک برداشت کیا ہو) اور تکلیف دہ ہونے کے باوجود اگر ایسا ہے تو کوشش کریں۔ یہ دیکھنے کے لیے کہ اس کا آپ پر کیا مثبت اثر ہوا ہے۔ ہنسنے کے لیے مزاح کا کوئی بھی طریقہ استعمال کریں یا تقریب میں کم از کم مسکرا دیں۔"
      ],
            [
          "آپ کے بچے کو آپ کے موجودہ یا ماضی کے تعلقات میں نرگسیت پسندانہ اور غیر سماجی احساسات کے کسی بھی نمونے کی نشاندہی کرنے کی کوشش کریں، یا کسی کے خلاف طویل مدتی رنجشیں ہیں۔ پھر یہ جاننے کی کوشش کریں کہ اس طرح کے رویے اور ناراضگی پر آپ کا کتنا وقت اور توانائی خرچ ہوتی ہے۔ "
      ],
            [
          "مستقبل میں اس سے نمٹنے کا ایک نیا طریقہ تیار کریں جس کی آپ نے اپنی زندگی میں غیر سماجی احساسات یا ذاتی عدم اطمینان کے طور پر شناخت کی ہے۔",
                  "1. ان احساسات سے انکار کیے بغیر ، ان کی عکاسی کرنے اور ان کو برقرار رکھنے اور ان کے اعمال سے بچنے کی کوشش کریں۔ذاتی نفرت کو ایک طرف رکھنے کی کوشش کریں۔یہ مشکل اور چیلنجنگ ہوسکتا ہے ، لیکن یہ جذباتی نشوونما کے لئے ضروری ہے۔یہاں ، آپ اپنے بچے کے لئے ایک تنقیدی لیکن نتیجہ خیز پوزیشن لیتے ہیں اور دور اندیشی کی ہمدردی کا اطلاق کرتے ہیں۔",
                  "2- ان احساسات سے جارحانہ توانائی کو نتیجہ خیز کام (مثلاً ورزش میں جانا، کسی دوست سے بات کرنا وغیرہ) اور آخر کار زندگی میں اپنے اعلیٰ مقصد کی طرف تخلیقی کام میں بھیجنے کا ایک مثبت طریقہ تلاش کریں۔",
              ],
        ["اپنی پچھلی زندگی میں ایک خیال رکھنے والے شخص کی تلاش کریں جس نے آپ کو شفقت اور حکمت کے الفاظ کے ساتھ چھوئے جب آپ مصیبت میں تھے۔",
                  "مثال کے طور پر، کوئی بوڑھا رشتہ دار یا دوست، خاندان کا جاننے والا، استاد، مشیر یا معالج جو فوت ہو سکتا ہے یا اس سے رابطہ نہیں کیا جا سکتا۔",
                  "یاد رکھیں کہ جب آپ کو اس چہرے سے شفقت اور شفقت ملی تو آپ نے کیسا محسوس کیا اور یہ آپ کے لیے کتنا جذباتی تھا۔",
                  "اپنی توجہ مرکوز کریں اور اس کردار کو اپنے مثالی ماڈل کے طور پر منتخب کریں۔",
                  "اس کردار کے ساتھ ایک افلاطونی رومانوی رشتہ بنائیں اور اپنے پسندیدہ محبت کے گیت کو اونچی آواز میں گا کر ان کے بارے میں اپنی تمام پیاری یادوں کو یاد کریں۔",
                  "ایک خاص گانا جسے آپ آزما سکتے ہیں وہ ہے 'میں آپ کے ساتھ محبت میں پڑنا نہیں روک سکتا'۔"
    ],

              ["کسی بھی یک طرفہ عقیدے کے نمونوں کو کمزور کرنے کے لیے اپنے معمول کے نظریاتی فریم ورک کو چیلنج کریں اور کسی بھی مسئلے کو متعدد زاویوں سے خود بخود اور جانچنے کی حوصلہ افزائی کریں۔ اس کی مشق ان مضامین یا تھیمز کے ساتھ کریں جن کے بارے میں آپ کو گہرا یقین ہے اور جن کے بارے میں آپ پرجوش بھی ہیں۔ اس میں کوئی بھی سماجی شامل ہوسکتا ہے۔ سیاسی یا اخلاقی مسائل جیسے شادی، جنسی رجحان یا نسل پرستی۔ مثال کے طور پر، کسی خاص مسئلے پر آپ کے سیاسی خیالات جو بھی ہوں، اس مسئلے کو لبرل اور قدامت پسند نقطہ نظر سے، یا بائیں اور دائیں بازو کے نقطہ نظر سے دیکھیں۔ مسئلے کے دونوں اطراف کو سمجھنے کی کوشش کریں اور اپنے غالب نظریاتی فریم ورک کو چیلنج کریں، اس کا مطلب یہ نہیں ہے کہ آپ اپنا نقطہ نظر تبدیل کریں، بلکہ یہ آپ کو اس مسئلے کو مختلف زاویوں سے دیکھنے کی اجازت دیتا ہے اور اپنے آپ کو دوسرے لوگوں کے جوتوں میں ڈالنے کے قابل ہوتا ہے۔ کسی ایسے سوال یا موضوع کے بارے میں سوچیں جو اس مشق کے دوران آپ نے ماضی میں سوچا ہو گا اس سے مختلف ہو اور اسے کم از کم 5 منٹ تک کریں۔"],

          ["ان لوگوں کی طرف سے متاثر کن اثبات کی فہرست جمع کریں جن کی آپ تعریف کرتے ہیں۔ تین کا انتخاب کریں جو آپ کو سب سے زیادہ متاثر کریں۔ انہیں پڑھیں اور انہیں کم از کم تین منٹ تک آہستہ آہستہ دہرائیں۔"],

    ["- ایک سانحے کے ابتدائی امتزاج کے بعد، اس میں کوئی شک نہیں کہ شدید منفی جذبات کے ساتھ، یاد رکھیں کہ نطشے نے ان تمام لوگوں کی خواہش کی تھی جن کی اس نے پرواہ کی تھی کہ وہ عظیم مصائب اور تباہی کو برداشت کریں، جو کہ بہت ہی مضحکہ خیز ہے: ",
              "ان لوگوں کے لئے جو میرے لئے فکر مند ہیں، میں مصیبت، تباہی، بیماری، بدسلوکی، ذلت اور رسوائی کی خواہش کرتا ہوں - میں چاہتا ہوں کہ وہ اپنی گہری ذلت، خود شک کی اذیت، مصیبت سے نا آشنا رہیں۔ کیونکہ میں ان پر ترس نہیں کھاتا، کیونکہ میری خواہش ہے کہ ان کے لیے صرف وہی چیز ثابت ہو سکے جو آج ثابت کر سکے کہ کوئی اس کے قابل ہے یا نہیں۔",             "- لہذا، اپنی حالت کے بارے میں سوچتے ہوئے، اس اقتباس کو بلند آواز سے پڑھیں، اور جیسے ہی آپ اس جملے پر پہنچیں:",
              "میری خواہش ہے کہ آپ مصائب، تباہی، بیماری، بدسلوکی، ... ، ہنسنا شروع کریں اور پورا اقتباس پڑھتے ہی ہنستے رہیں۔",
              "میں صرف یہ شامل کرنا چاہتا ہوں کہ اس مشق کو آزمانا اور اس سے واقف ہونا اچھا ہے جب کہ آپ مثبت موڈ میں ہیں، لیکن میں یہ بھی تجویز کرتا ہوں کہ جب بھی آپ منفی جذبات کا سامنا کر رہے ہوں تو اسے آزمائیں۔"
              ],

            [
                  "- ہم لاشعوری طور پر اپنے اندرونی کام کرنے والے ماڈل کا استعمال کرتے ہیں، جو اپنے ابتدائی ماحول سے سیکھا جاتا ہے، عمل کرنے کے لیے سماجی دنیا کی تشریح کے لیے۔",
                  "- بہت سے طریقوں سے، ہم لاشعوری طور پر اس طریقے کی نقل کر سکتے ہیں جس طرح ہمارے ابتدائی نگہداشت کرنے والوں نے کارروائی کرنے کے لیے سماجی تعاملات کی تشریح کی تھی۔",
                  "- ان تشریحات کو ایڈجسٹ کرنا شروع کریں تاکہ آپ کے جذباتی نشوونما سے مماثل طرز عمل کا زیادہ سے زیادہ منتخب نمونہ بنایا جا سکے۔",
                  "اس مشق کے بارے میں سوچنا اور یہاں تک کہ اب اس مشق کو آزمانا بہتر ہے کہ آپ مثبت موڈ میں ہیں، لیکن میں سختی سے مشورہ دیتا ہوں کہ جب بھی آپ کو منفی جذبات کا سامنا ہو تو اسے ضرور کریں۔"
              ],

  [
                  "بالغ صدمے کے مثلث کے پہلوؤں سے واقف ہو جاتا ہے: اندرونی بدسلوکی کرنے والا، شکار اور بچانے والا۔",
                  "بالغ اس مثلث کے اثرات کا جائزہ لیتا ہے (نرگسیت اور تخلیقی صلاحیتوں کی کمی) روزمرہ کی زندگی اور پچھلے تجربات میں۔",
                  "بالغ اپنی زندگی کے اہم تجربات اور جوانی میں سماجی اور سیاسی نظریات کا جائزہ لیتے ہیں کہ اندرونی طور پر ہراساں کرنا کس طرح کام کرتا ہے۔",
                  "بالغ چار مختلف طریقوں سے اپنے تجربات سے مثالوں کی ایک فہرست بناتے ہیں جو ہراساں کرنا اندرونی طور پر کام کرتے ہیں۔",
    "بالغ اپنی زندگی کے تجربات کا بغور تجزیہ کرتے ہیں مثال کے طور پر چوٹ لگنے، کسی اندرونی بدمعاش کے ذریعے چوٹ پہنچنے، اور دوسروں پر بدمعاشی کا مظاہرہ کرنا۔",
                  "مذکورہ بالا کی بنیاد پر، بالغ افراد اپنے تجربات کا از سر نو جائزہ لیتے ہیں، بشمول اندرونی بدسلوکی، شکار کی ذہنیت، اور الزام تراشی کے کھیل، جو تخلیقی صلاحیتوں کو پروان چڑھنے دیتے ہیں۔"
              ],

        [
                  "بچے کی پریشانی کی سطح کم ہونے کے بعد اور جب ہم منفی جذبات کو اعتدال اور ہنسی کی مشقیں جاری رکھتے ہیں، تو ہم اپنے بچے سے کہتے ہیں:",
                  "- آپ بحران کو مضبوط ہونے کے راستے کے طور پر کیسے دیکھ سکتے ہیں؟ (ہا ہا ہا)۔",
                  "- آپ بحران کو اپنے اعلیٰ ترین مقصد تک پہنچنے کے راستے سے کیسے تعبیر کر سکتے ہیں؟ (ہا ہا ہا)۔",
                  "- کیا اندرونی پریشان کن احساسات دوسروں پر دوبارہ پیش کیے گئے ہیں؟",
                  "بالغ مندرجہ ذیل سوالات پوچھتا ہے:",
                  "- اس بحران کی ان بحرانوں سے کیا مماثلت ہے جن کا میں پہلے سامنا کر چکا ہوں؟",
  "- جس خاندانی بحران کا میں نے بچپن میں تجربہ کیا تھا وہ کتنا مماثل ہے؟",
                  "- کیا دوسرے فریق کی مثبت خصوصیات اس کی منفی خصوصیات سے زیادہ نہیں ہیں؟",
                  "- ایک بالغ میرے بچے کے مقابلے میں بحران کی تشریح کیسے کرتا ہے؟",
                  "- کیا میں اسے کسی اور نقطہ نظر سے دیکھ سکتا ہوں؟",
                  "- کیا میں خود کو ان کے جوتوں میں ڈال سکتا ہوں اور ان کے اثرات کو سمجھ سکتا ہوں؟",
                  "- اپنی نئی بصیرت کے ساتھ، کیا میں بحران میں ملوث لوگوں کو پرسکون کرنے کا کوئی راستہ تلاش کر سکتا ہوں تاکہ ہم ایک بہتر حل تلاش کر سکیں؟",
                  "- اگر میں نہیں کر سکتا، تو کیا میں احترام کے ساتھ اپنا فاصلہ رکھ سکتا ہوں اور بحث یا تنازعہ کو ختم کر سکتا ہوں؟"
          ],

    [
                  "ہمارا بالغ ہمارے بچے سے پوچھتا ہے کہ کیا اس انتہائی منافع بخش نظام کے سامنے پیش ہونا سمجھ میں آتا ہے جس نے ہمیں آج اس مقام پر پہنچا دیا ہے؟",
                  "کیا مجھے واقعی ان تمام پروڈکٹس، چیزوں اور خدمات کی ضرورت ہے جو مجھ پر لاتعداد پیغامات اور ساتھیوں کے دباؤ یا سماجی دباؤ کی وجہ سے دھکیل رہے ہیں؟",
                  "جب زندگی تباہی کے خطرے میں ہے، تو کیا مادیت پرستی یا خود غرض اور خود غرض طرز زندگی کی خواہش کرنا مناسب ہے؟",
      "کیا ہم اس صفر رقم مادیت پر مبنی کھیل کو جاری رکھنا چاہتے ہیں یا کیا ہم اپنے وجودی مسائل کو حل کرنے کے لیے اپنے اعلیٰ مقاصد کو حاصل کرنا چاہتے ہیں؟",
                  "کیا ہم زندہ سیارے کو بچا سکتے ہیں سوائے عالمی یکجہتی پر مبنی ایک نئے عالمی سماجی معاہدے کی طرف کام کرنے کے جس میں انسانی جارحیت کو مشترکہ بھلائی کے لیے تخلیقی صلاحیتوں میں تبدیل کیا جا سکتا ہے؟"
                ],

  ],



  "feelingـformal": [
    "آپ کیسے ہو؟",
      "کیا تم ٹھیک ہو؟",
      "آپ کیسے ہو؟",
      "کیسے ہو آج کل؟",
      "آج آپ کا کیا حال ہے؟",
      "تم ٹھیک ہو؟",
      "آپ کیسے ہو؟",
      "آج آپ کا کیا حال ہے؟",
      "آپ کیسے ہو؟",
      "آپ آج خوش ہیں یا اداس؟",
      "کیا آج آپ کی طبیعت ٹھیک ہے؟",
  ],

  "emotion_verifierـformal": [
      "کیا آپ X محسوس کرتے ہیں؟",
      "کیا آپ X محسوس کرتے ہیں؟",
      "کیا آپ کو ایسا لگتا ہے کہ آپ Z ہیں؟",
  ],

  "tell_emotionـformal": [
      "تم غمگین ہو یا خوش؟",
      "آپ خوش ہیں یا اداس؟",
      "میں نہیں سمجھا۔ تم اداس ہو یا خوش؟",
      "براہ کرم مزید واضح طور پر بتائیں، کیا آپ غمگین ہیں یا خوش؟",
      "میں نے آپ کے احساس کو محسوس نہیں کیا۔ آپ اداس ہیں یا خوش؟",
      "کیسا محسوس کر رہے ہو؟ اداس ہو یا خوش؟",
      "براہ کرم مزید وضاحت کریں۔ کیا آپ غمگین ہیں یا خوش؟",
      "آپ کیسا محسوس کر رہے ہیں؟ آپ اداس ہیں یا خوش؟",
      "میں آپ کا احساس نہیں سمجھا۔ آپ اداس ہیں یا خوش؟",
      "آپ کو غم ہے یا خوشی؟",
      "آپ کو غم ہے یا خوشی؟",
  ],

  "if_need_any_protocolsـformal": [
      "کیا آپ کو اپنی کرنسی کو بہتر بنانے کے لیے کچھ ورزش کی ضرورت ہے؟",
      "کیا آپ کو بہتر ہونے کے لیے کچھ ورزش کی ضرورت ہے؟",
      "کیا آپ کو لگتا ہے کہ آپ کو ورزش کی ضرورت ہے؟",
      "کیا آپ اپنی کرنسی کو بہتر بنانے کے لیے کوئی ورزش کرنا چاہیں گے؟",
      "کیا آپ کو ضرورت ہے کہ میں آپ کو ورزش سے متعارف کراؤں؟",
      "کیا آپ کچھ ورزش کرنا پسند کریں گے؟",
      "کیا آپ کو لگتا ہے کہ آپ کو اپنی حالت بہتر بنانے کے لیے ورزش کی ضرورت ہے؟",
      "کیا آپ کو لگتا ہے کہ ورزش کرنے سے آپ کی حالت بہتر ہو جائے گی؟",
      "کیا آپ کو لگتا ہے کہ آپ کو اپنی حالت بہتر بنانے کے لیے ورزش کی ضرورت ہے؟",
      "کیا آپ کو اپنی کرنسی کو بہتر بنانے کے لیے ورزش کرنے کی ضرورت ہے؟",
  "کیا آپ کو بہتر محسوس کرنے کے لیے کچھ ورزش کرنے کی ضرورت ہے؟",
      "کیا آپ کو اپنا موڈ بہتر کرنے کے لیے ورزش کرنے کی ضرورت ہے؟",
      "کیا آپ کو بہتر محسوس کرنے کے لیے کچھ ورزش کرنے کی ضرورت ہے؟",
      "کیا آپ کو لگتا ہے کہ آپ کو ورزش کی ضرورت ہے؟",
      "کیا آپ کو ایسا لگتا ہے کہ آپ کو اپنے موڈ کو بہتر بنانے کے لیے ورزش کرنے کی ضرورت ہے؟",
      "کیا آپ اپنے موڈ کو بہتر بنانے کے لیے کچھ ورزش کرنا چاہیں گے؟",
      "کیا آپ بہتر محسوس کرنے کے لیے کچھ ورزش کرنا چاہیں گے؟",
      "کیا آپ کو ایک مشق کی ضرورت ہے جو آپ کو متعارف کرایا جائے؟",
      "کیا آپ کو اپنے موڈ کو بہتر بنانے کے لیے تجویز کردہ کسی ورزش کی ضرورت ہے؟",
      "کیا آپ کو لگتا ہے کہ آپ کو بہتر ہونے کے لیے ورزش کرنے کی ضرورت ہے؟",
  ]


}

class Encod_Model:
  def __init__(self):
    self.tokenizer = AutoTokenizer.from_pretrained("google/muril-base-cased")
    self.model = AutoModelForSequenceClassification.from_pretrained("MichaelHuang/muril_base_cased_urdu_sentiment_2.0", output_hidden_states=True)

  def generate_encoding(self, texts):
    inputs = self.tokenizer(["embed: " + text for text in texts], return_tensors="pt", padding=True, truncation=True, max_length=1024)

    with torch.no_grad():
      outputs = self.model(**inputs)
      embeddings = outputs.hidden_states[-1]
      embeddings = torch.mean(embeddings, dim=1)
    return embeddings.cpu().numpy()
  
class Chatbot:
  def __init__(self, SAT_path, model):
    self.model = model
    self.SAT_path = SAT_path
    self.data = SAT_Text()
    self.previous_questions_embeddings = np.zeros((1,768))
    self.emotion = ""
    # with open(SAT_path, 'r', encoding='utf-8') as file:
    #   self.data = yaml.safe_load(file)
    #   print("data loaded!")
  def find_k_most_relevant(self, query_similarity_vector, boostan_poems, k):
    k_max_indices = np.argsort(-query_similarity_vector)[:k]
    if isinstance(boostan_poems, list):
        results = [boostan_poems[i] for i in k_max_indices]
    elif isinstance(boostan_poems, np.ndarray):
        results = boostan_poems[k_max_indices]
    else:
        raise TypeError("boostan_poems must be a list or a NumPy array")
    return results

  def random_generator(self, current_questions):
      future_question = random.choice(current_questions)
      new_embedding = self.model.generate_encoding([future_question])

      #print("Future Question Embedding Shape: ", new_embedding.shape)
      self.previous_questions_embeddings = np.concatenate([self.previous_questions_embeddings, new_embedding], axis=0)
      return future_question



  def embedding_generator(self, previous_questions_embeddings=None, current_questions=None):

      if current_questions is None:
        raise TypeError("Current questions cannot be empty!")
      if previous_questions_embeddings is not None:
        self.previous_questions_embeddings = previous_questions_embeddings

      if len(self.previous_questions_embeddings) > 0:
          embeddings_array = np.array(self.previous_questions_embeddings, dtype="float32")
          weights = np.arange(1, len(self.previous_questions_embeddings) + 1)
          weights = weights.reshape(-1, 1)
          weighted_sum = np.sum(embeddings_array * weights, axis=0)
          total_weight = np.sum(weights)
          average_embedding = weighted_sum / total_weight
      else:
          average_embedding = np.zeros(768, dtype="float32")#for q in current_questions:

      #print("Avg Embeddings Shape:", average_embedding.shape)
      current_questions_embeddings = self.model.generate_encoding(current_questions)
      #print("Current Questions Embeddings Shape:", current_questions_embeddings.shape)
      RANDOMNESS_PARAM = 0.5
      if random.uniform(0, 1) <= RANDOMNESS_PARAM:
          print("rand")
          future_question = random.choice(current_questions)
          #print("Future Question: ", future_question)
          new_embedding = self.model.generate_encoding([future_question]).reshape(1, -1)
          self.previous_questions_embeddings = np.concatenate([self.previous_questions_embeddings, new_embedding], axis=0)
          return future_question
      else:
        query_similarity_vector = cosine_similarity([average_embedding], current_questions_embeddings)[0]
        future_question = self.find_k_most_relevant(query_similarity_vector, current_questions, 1)[0]
        #print(future_question)
        new_embedding = self.model.generate_encoding([future_question])
        #print("Future Question Embedding Shape: ", new_embedding.shape)
        self.previous_questions_embeddings = np.concatenate([self.previous_questions_embeddings, new_embedding], axis=0)
        return future_question

  def dof_checker(self, message):
    for f in self.data["friendly"]:
      if f in message:
        return 0
    for f in self.data["formal"]:
      if f in message:
        return 1
  def yes_no_detection(self, message):
    for y in self.data["yes"]:
        if y in message:
            return "YES"
    for n in self.data["no"]:
        if n in message:
            return "NO"
  def check_emotion_positiveness(self, emo):
    for p in self.data["positive_emotions"]:
        if emo == p:
            return "POS"
    for n in self.data["negative_emotions"]:
        if emo == n:
            return "NEG"
  def check_event_time(self, message):
    for r in self.data["recent"]:
        if r in message:
            return "RECENT"
    for l in self.data["long_time"]:
        if l in message:
            return "NOT_RECENT"
  def protocol_generator(self, p_num):
    res = "\n\n" + self.data["protocol_titles"][p_num] + "\n\n"
    for p in self.data["protocols"][p_num]:
        res += p
        res += "\n"
    return res

  def shuffle_lst(self, lst):
    random.shuffle(lst)
    return 0
  def Information_Retrieval_System(self, state,
    message,
    suggested_protocol_pool,
    addtionals_lst,
    addtional_num,
    name,
    dof):
    #(future_question, "FORMALITY", suggested_protocol_pool,[], addtionals_lst, addtional_num, name, dof)
    #---------------------------------------------------------------------------
    if state=="GREETING":
      future_question = self.random_generator(self.data["greeting"])
      return future_question, "FORMALITY", suggested_protocol_pool,["ہیلو ","سلام"], addtionals_lst, addtional_num, name, dof
    #---------------------------------------------------------------------------
    if state=="FORMALITY":
      future_question = self.embedding_generator(current_questions= self.data["formality"])
      return future_question, "NAME", suggested_protocol_pool,["دوستانہ", "رسمی"], addtionals_lst, addtional_num, name, dof
    #---------------------------------------------------------------------------
    if state=="NAME":
      dof = self.dof_checker(message)
      b = []
      if dof == 0:
        b = self.shuffle_lst(self.data["additionals"])
        future_question = self.embedding_generator(current_questions=self.data["name_lst"])
        return future_question, "FEELING", suggested_protocol_pool,[], addtionals_lst, addtional_num, name, dof
      elif dof == 1:
        b = self.shuffle_lst(self.data["additionals"])
        future_question = self.embedding_generator(current_questions= self.data["feelingـformal"])
        return future_question, "EMOTION_VERIFIER", suggested_protocol_pool,["میں خوش ہوں", "میں اداس ہوں"], addtionals_lst, addtional_num, name, dof
      else:
        future_question = self.embedding_generator(current_questions=self.data["formality"])
        return future_question, "NAME", suggested_protocol_pool,["ہیلو ","سلام"], addtionals_lst, addtional_num, name, dof
    #---------------------------------------------------------------------------
    elif state == "FEELING":
        name = message
        print(name)
        if dof == 0:
            future_question = self.embedding_generator(current_questions=self.data["feeling"])
            return future_question.replace("YU", name), "EMOTION_VERIFIER", suggested_protocol_pool, ["میں خوش ہوں", "میں اداس ہوں"], addtionals_lst, addtional_num, name, dof,
            #.replace("U", ye_name_detector(name)),
        #elif dof == 1:
        future_question = self.embedding_generator(current_questions=self.data["feelingـformal"])
        return future_question, "EMOTION_VERIFIER", suggested_protocol_pool, ["میں خوش ہوں", "میں اداس ہوں"], addtionals_lst, addtional_num, name, dof
    #---------------------------------------------------------------------------
    # Ask if detected feeling is correct?
    elif state == "EMOTION_VERIFIER":
        # <<< Integrate Sentiment Model >>>
        self.emotion, ZZ, XX = "Happy","خوش","خوش"#sentiment_model.predict_sentiment(model, message)
        print(self.emotion)
        if dof == 0:
            future_question = self.embedding_generator(current_questions=self.data["emotion_verifier"])
            return future_question.replace("X", XX).replace("Z", ZZ), "EMOTION_VERIFIER2", suggested_protocol_pool, ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof
        # elif dof == 1:
        future_question = self.embedding_generator(current_questions=self.data["emotion_verifierـformal"])
        return future_question.replace("X", XX).replace("Z", ZZ), "EMOTION_VERIFIER2", suggested_protocol_pool, ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof

    #---------------------------------------------------------------------------
    # Check if emtion verified corre
    elif state == "EMOTION_VERIFIER2":
        if self.yes_no_detection(message) == "YES":
            if self.check_emotion_positiveness(self.emotion) == "POS":
                if dof == 0:
                    future_question = self.embedding_generator(current_questions=self.data["if_need_any_protocols"])
                    return future_question.replace("YU", name), "IF_NEED_ANY_PROTOCOLS", suggested_protocol_pool,  ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof
                # elif dof == 1:
                future_question = self.embedding_generator(current_questions=self.data["if_need_any_protocolsـformal"])
                return future_question, "IF_NEED_ANY_PROTOCOLS", suggested_protocol_pool, ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof
            elif self.check_emotion_positiveness(self.emotion) == "NEG":
                if dof == 0:
                    future_question, = self.embedding_generator(current_questions=self.data["event"])
                    return future_question, "EVENT", suggested_protocol_pool, ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof
                # elif dof == 1:
                future_question = self.embedding_generator(current_questions=self.data["event"])
                return future_question, "EVENT", suggested_protocol_pool, ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof
            else:
                if dof == 0:
                  future_question = self.embedding_generator(current_questions=self.data["neutral_verifier"])
                  return future_question, "END", suggested_protocol_pool, ["شکر گزار", "شکریہ"], addtionals_lst, addtional_num, name, dof
                # elif dof == 1:
                future_question = self.embedding_generator(current_questions=self.data["neutral_verifier_formal"])
                return future_question, "END", suggested_protocol_pool, ["شکر گزار", "شکریہ"], addtionals_lst, addtional_num, name, dof,
        elif self.yes_no_detection(message) == "NO":
            if dof == 0:
                future_question = self.embedding_generator(current_questions=self.data["tell_emotion"])
                return future_question, "EMOTION_DETECTOR", suggested_protocol_pool, ["میں خوش ہوں", "میں اداس ہوں"], addtionals_lst, addtional_num, name, dof
            # elif dof == 1:
            future_question = self.embedding_generator(current_questions=self.data["tell_emotionـformal"])
            return future_question, "EMOTION_DETECTOR", suggested_protocol_pool, ["میں خوش ہوں", "میں اداس ہوں"], addtionals_lst, addtional_num, name, dof,
        else:
            if dof == 0:
                future_question = self.embedding_generator(current_questions=self.data["yes_no"])
                return future_question, "EMOTION_VERIFIER2", suggested_protocol_pool, ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof,
            # elif dof == 1:
            future_question = self.embedding_generator(current_questions=self.data["yes_no_formal"])
            return future_question, "EMOTION_VERIFIER2", suggested_protocol_pool, ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof,
    #---------------------------------------------------------------------------
        # Emotion Detector
    elif state == "EMOTION_DETECTOR":
        self.emotion, ZZ, XX = "Happy","خوش","خوش"#sentiment_model.predict_sentiment(model, message)
        print(self.emotion)

        if self.check_emotion_positiveness(self.emotion) == "POS":
            if dof == 0:
                future_question = self.embedding_generator(current_questions=self.data["if_need_any_protocols"])
                return future_question.replace("YU", name), "IF_NEED_ANY_PROTOCOLS", suggested_protocol_pool,  ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof
            # elif dof == 1:
            future_question = self.embedding_generator(current_questions=self.data["if_need_any_protocolsـformal"])
            return future_question, "IF_NEED_ANY_PROTOCOLS", suggested_protocol_pool,  ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof
        elif self.check_emotion_positiveness(self.emotion) == "NEG":
            suggested_protocol_pool.extend([17, 18, 7, 16, 15])
            if dof == 0:
                future_question = self.embedding_generator(current_questions=self.data["event"])
                return future_question, "EVENT", suggested_protocol_pool,  ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof
            # elif dof == 1:
            future_question = self.embedding_generator(current_questions=self.data["event"])
            return future_question, "EVENT", suggested_protocol_pool,  ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof
        else:
            if dof == 0:
                future_question = self.embedding_generator(current_questions=self.data["error"])
                return future_question, "FEELING", suggested_protocol_pool, ["کوئی مسئلہ نہیں"], addtionals_lst, addtional_num, name, dof
            # elif dof == 1:
            future_question = self.embedding_generator(current_questions=self.data["error"])
            return future_question, "FEELING", suggested_protocol_pool, ["کوئی مسئلہ نہیں"], addtionals_lst, addtional_num, name,dof
    #---------------------------------------------------------------------------
    # Ask if user needs any protocols (in case of happiness)?
    elif state == "IF_NEED_ANY_PROTOCOLS":
        if self.yes_no_detection(message) == "YES":
            suggested_protocol_pool.extend([15, 21, 7, 8, 17, 18, 12, 13, 14, 26, 19, 22 ] )#23
            random.shuffle(suggested_protocol_pool)
            current_protocol = suggested_protocol_pool.pop(0)
            print(current_protocol, len(self.data["protocol_titles"]), len(self.data["protocols"]))
            if dof == 0:
                future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                return {"response": future_question,"title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof
            # elif dof == 1:
            if len(suggested_protocol_pool) > 0:
                random.shuffle(suggested_protocol_pool)
                current_protocol = suggested_protocol_pool.pop(0)
                future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                return {"response": future_question, "title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name,dof
            else:
                if dof == 0:
                    future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                    return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
                # elif dof == 1:
                future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
        # if yes_no_detection(message) == "NO":
        if dof == 0:
            future_question = self.embedding_generator(current_questions=self.data["thanks"])
            return future_question, "END", suggested_protocol_pool, ["خدا حافظ", "آپ کا دن اچھا گزرے۔"], addtionals_lst, addtional_num, name,dof,
        # elif dof == 1:
        future_question = self.embedding_generator(current_questions=self.data["thanks"])
        return future_question, "END", suggested_protocol_pool, ["خدا حافظ", "آپ کا دن اچھا گزرے۔"], addtionals_lst, addtional_num, name,dof,
    #---------------------------------------------------------------------------

    elif state == "EVENT":
        if self.yes_no_detection(message) == "YES":
            if dof == 0:
                future_question = self.embedding_generator(current_questions=self.data["time"])
                return future_question, "EVENT_TIME", suggested_protocol_pool, ["یہ ایک طویل وقت پہلے تھا", "حال ہی میں ہوا"], addtionals_lst, addtional_num, name, dof
            # elif dof == 1:
            future_question = self.embedding_generator(current_questions=self.data["time"])
            return future_question, "EVENT_TIME", suggested_protocol_pool, ["یہ ایک طویل وقت پہلے تھا", "حال ہی میں ہوا"], addtionals_lst, addtional_num, name, dof,
        elif self.yes_no_detection(message) == "NO":
            suggested_protocol_pool.extend([9])
            if dof == 0:
                if len(suggested_protocol_pool) > 0:
                    random.shuffle(suggested_protocol_pool)
                    current_protocol = suggested_protocol_pool.pop(0)
                    future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                    return {"response": future_question, "title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof,
                else:
                    if dof == 0:
                        future_question = self.embedding_generator(current_questions=self.data["thanks"])
                        return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
                    # elif dof == 1:
                    future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                    return future_question,"END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num,name, dof
            # elif dof == 1:
            if len(suggested_protocol_pool) > 0:
                random.shuffle(suggested_protocol_pool)
                current_protocol = suggested_protocol_pool.pop(0)
                future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                return {"response": future_question,"title": self.data["protocol_titles"][current_protocol],"details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof
            else:
                if dof == 0:
                    future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                    return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
                # elif dof == 1:
                future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,

        return future_question, "EVENT", suggested_protocol_pool, ["جی ہاں", "نہیں"], self.data["not_understanding"], addtional_num, name, dof


    #---------------------------------------------------------------------------
    # Ask if event was recent?
    elif state == "EVENT_TIME":
        if self.check_event_time(message) == "RECENT":
            suggested_protocol_pool.extend([9])
            if dof == 0:
                if len(suggested_protocol_pool) > 0:
                    random.shuffle(suggested_protocol_pool)
                    current_protocol = suggested_protocol_pool.pop(0)
                    future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                    return {"response": future_question, "title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof
                else:
                    if dof == 0:
                        future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                        return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
                    # elif dof == 1:
                    future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                    return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
            # elif dof == 1:

            if len(suggested_protocol_pool) > 0:
                random.shuffle(suggested_protocol_pool)
                current_protocol = suggested_protocol_pool.pop(0)
                future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                return { "response": future_question, "title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof
            else:
                if dof == 0:
                    future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                    return  future_question, "END2", suggested_protocol_pool,["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
                # elif dof == 1:
                future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                return future_question, "END2", suggested_protocol_pool,["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
        if self.check_event_time(message) == "NOT_RECENT":
            if dof == 0:
                future_question = self.embedding_generator(current_questions=self.data["exercise10_distressing"])
                return future_question + "\n" + self.protocol_generator(11), "PROTOCOL_10", suggested_protocol_pool, ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof
            # elif dof == 1:
            future_question = self.embedding_generator(current_questions=self.data["exercise10_distressing"])
            return future_question + "\n" + self.protocol_generator(11), "PROTOCOL_10", suggested_protocol_pool,  ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof
        return future_question, "EVENT_TIME", suggested_protocol_pool, ["یہ ایک طویل وقت پہلے تھا","حال ہی میں ہوا"], self.data["not_understanding"], addtional_num, name, dof



    #---------------------------------------------------------------------------
    # Ask if protocol 10 is distressing?
    elif state == "PROTOCOL_10":
        if self.yes_no_detection(message) == "YES":
            suggested_protocol_pool.extend([15])
            if dof == 0:
                if len(suggested_protocol_pool) > 0:
                    random.shuffle(suggested_protocol_pool)
                    current_protocol = suggested_protocol_pool.pop(0)
                    future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                    return { "response": future_question, "title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof
                else:
                    if dof == 0:
                        future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                        return future_question, "END2", suggested_protocol_pool,["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
                    # elif dof == 1:
                    future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                    return future_question, "END2", suggested_protocol_pool,["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
            # elif dof == 1:
            if len(suggested_protocol_pool) > 0:
                random.shuffle(suggested_protocol_pool)
                current_protocol = suggested_protocol_pool.pop(0)
                future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                return { "response": future_question, "title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool,["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof
            else:
                if dof == 0:
                    future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                    return future_question, "END2", suggested_protocol_pool,["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
                # elif dof == 1:
                future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                return future_question, "END2", suggested_protocol_pool,["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
        if self.yes_no_detection(message) == "NO":
            suggested_protocol_pool.extend([10])
            if dof == 0:
                if len(suggested_protocol_pool) > 0:
                    random.shuffle(suggested_protocol_pool)
                    current_protocol = suggested_protocol_pool.pop(0)
                    future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                    return { "response": future_question, "title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool,["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof,
                else:
                    if dof == 0:
                        future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                        return future_question, "END2", suggested_protocol_pool,["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
                    # elif dof == 1:
                    future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                    return future_question, "END2", suggested_protocol_pool,["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
            # elif dof == 1:
            if len(suggested_protocol_pool) > 0:
                random.shuffle(suggested_protocol_pool)
                current_protocol = suggested_protocol_pool.pop(0)
                future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                return { "response": future_question, "title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool,["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof
            else:
                if dof == 0:
                    future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                    return future_question, "END2", suggested_protocol_pool,["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
                # elif dof == 1:
                future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                return future_question, "END2", suggested_protocol_pool,["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof

        return future_question, "PROTOCOL_10", suggested_protocol_pool, ["جی ہاں", "نہیں"], self.data["not_understanding"], addtional_num, name, dof


    #---------------------------------------------------------------------------
    # Additional Questions
    elif state == "ADDITIONAL":
        if self.yes_no_detection(message) == "YES":
            return random.choice(addtionals_lst[addtional_num]["questions"]), "ADDITIONAL_RESPONSE",suggested_protocol_pool, ["جی ہاں", "نہیں"], addtionals_lst, addtional_num + 1, name, dof
        if self.yes_no_detection(message) == "NO":
            if len(suggested_protocol_pool) > 0:
                random.shuffle(suggested_protocol_pool)
                current_protocol = suggested_protocol_pool.pop(0)
                if dof == 0:
                    future_question  = self.embedding_generator(current_questions=self.data["exercise_doing"])
                    return { "response": future_question,"title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool,["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof,
                # elif dof == 1:
                future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                return  { "response": future_question, "title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool,["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof,
            else:
                if dof == 0:
                    future_question  = self.embedding_generator(current_questions=self.data["thanks"] )
                    return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
                # elif dof == 1:
                future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
    # Additional Questions
    elif state == "ADDITIONAL_RESPONSE":
        if self.yes_no_detection(message) == "YES":
            suggested_protocol_pool.extend(addtionals_lst[addtional_num - 1]["YES"])
            if addtional_num < 7:
                if dof == 0:
                    if len(suggested_protocol_pool) > 0:
                        random.shuffle(suggested_protocol_pool)
                        current_protocol = suggested_protocol_pool.pop(0)
                        future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                        return { "response": future_question, "title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol], }, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof
                    else:
                        if dof == 0:
                            future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                            return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
                        # elif dof == 1:
                        future_question  = self.embedding_generator(current_questions=self.data["thanks"] )
                        return  future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
                # elif dof == 1:
                if len(suggested_protocol_pool) > 0:
                    random.shuffle(suggested_protocol_pool)
                    current_protocol = suggested_protocol_pool.pop(0)
                    future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                    return { "response": future_question, "title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol], }, "PROTOCOL_SUGGESTING2", suggested_protocol_pool,["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof
                else:
                    if dof == 0:
                        future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                        return  future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
                    # elif dof == 1:
                    future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                    return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
            else:
                if len(suggested_protocol_pool) > 0:
                    random.shuffle(suggested_protocol_pool)
                    current_protocol = suggested_protocol_pool.pop(0)
                    if dof == 0:
                        future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                        return { "response": future_question,"title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol], }, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name,dof,
                    # elif dof == 1:
                    future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                    return {"response": future_question, "title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol], }, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof,
                else:
                    if dof == 0:
                        future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                        return future_question, "END2", suggested_protocol_pool ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
                    # elif dof == 1:
                    future_question = self.embedding_generator(current_questions=self.data["thanks"])
                    return  future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
        if self.yes_no_detection(message) == "NO":
            suggested_protocol_pool.extend(addtionals_lst[addtional_num - 1]["NO"])
            if addtional_num < 7:
                if dof == 0:
                    if len(suggested_protocol_pool) > 0:
                        random.shuffle(suggested_protocol_pool)
                        current_protocol = suggested_protocol_pool.pop(0)
                        future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                        return { "response": future_question,"title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof,
                    else:
                        if dof == 0:
                            future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                            return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
                        # elif dof == 1:

                        future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                        return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
                # elif dof == 1:
                if len(suggested_protocol_pool) > 0:
                    random.shuffle(suggested_protocol_pool)
                    current_protocol = suggested_protocol_pool.pop(0)
                    future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                    return {"response": future_question, "title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof,
                else:
                    if dof == 0:
                        future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                        return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
                    # elif dof == 1:
                    future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                    return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
            else:
                if len(suggested_protocol_pool) > 0:
                    random.shuffle(suggested_protocol_pool)
                    current_protocol = suggested_protocol_pool.pop(0)
                    if dof == 0:
                      future_question = embedding_generator(current_questions=self.data["exercise_doing"])
                      return {"response": future_question, "title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof,
                    # elif dof == 1:
                    future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                    return { "response": future_question,"title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol], }, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst,addtional_num, name, dof,
                else:
                    if dof == 0:
                        future_question = self.embedding_generator(current_questions=self.data["thanks"])
                        return future_question, "END2", suggested_protocol_pool,["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
                    # elif dof == 1:
                    future_question = self.embedding_generator(current_questions=self.data["thanks"])
                    return future_question, "END2", suggested_protocol_pool,["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,


    elif state == "PROTOCOL_SUGGESTING":
        if len(suggested_protocol_pool) > 0:
            random.shuffle(suggested_protocol_pool)
            current_protocol = suggested_protocol_pool.pop(0)
            if dof == 0:
                future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                return { "response": future_question,"title": self.data["protocol_titles"][current_protocol],"details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"],addtionals_lst, addtional_num, name, dof,
            # elif dof == 1:
            future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
            return {"response": future_question, "title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"],addtionals_lst, addtional_num, name, dof,
        else:
            if dof == 0:
                future_question = self.embedding_generator(current_questions=self.data["thanks"])
                return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
            # elif dof == 1:
            future_question = self.embedding_generator(current_questions=self.data["thanks"])
            return future_question, "END2", suggested_protocol_pool,["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,

    elif state == "PROTOCOL_SUGGESTING2":
        if self.yes_no_detection(message) == "YES":
            if dof == 0:
                future_question = self.embedding_generator(current_questions=self.data["exercise_feeling"])
                return future_question, "PROTOCOL_SUGGESTING3", suggested_protocol_pool, ["ابھی تک اچھا نہیں", "بہتر"], addtionals_lst, addtional_num, name, dof,
            # elif dof == 1:
            future_question = self.embedding_generator(current_questions=self.data["exercise_feeling"])
            return future_question, "PROTOCOL_SUGGESTING3", suggested_protocol_pool, ["ابھی تک اچھا نہیں", "بہتر"], addtionals_lst, addtional_num, name, dof,
        if self.yes_no_detection(message) == "NO":
            if len(suggested_protocol_pool) > 0:
                if dof == 0:
                    future_question  = self.embedding_generator(current_questions=self.data["more_exercises"])
                    return future_question, "PROTOCOL_SUGGESTING_AGAIN", suggested_protocol_pool,  ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof,
                # elif dof == 1:
                future_question = self.embedding_generator(current_questions=self.data["more_exercises"])
                return future_question, "PROTOCOL_SUGGESTING_AGAIN", suggested_protocol_pool,  ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof,
            else:
                if dof == 0:
                    future_question  = self.embedding_generator(current_questions=self.data["thanks"])
                    return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
                # elif dof == 1:
                future_question = self.embedding_generator(current_questions=self.data["thanks"])
                return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,






    elif state == "PROTOCOL_SUGGESTING_AGAIN":
      if self.yes_no_detection(message) == "YES":
          if len(suggested_protocol_pool) > 0:
              random.shuffle(suggested_protocol_pool)
              current_protocol = suggested_protocol_pool.pop(0)
              if dof == 0:
                  future_question = self.embedding_generator(current_questions=self.data["exercise_doing"])
                  return {"response": future_question,"title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num, name, dof,
              # elif dof == 1:
              future_question  = self.embedding_generator(current_questions=self.data["exercise_doing"])
              return {"response": future_question,"title": self.data["protocol_titles"][current_protocol], "details": self.data["protocols"][current_protocol],}, "PROTOCOL_SUGGESTING2", suggested_protocol_pool, ["میں یہ نہیں کر سکتا", "ٹھیک ہے"], addtionals_lst, addtional_num,name, dof,
          else:
              if dof == 0:
                future_question = self.embedding_generator(current_questions=self.data["thanks"])
                return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
              # elif dof == 1:
              future_question  = self.embedding_generator(current_questions=self.data["thanks"])
              return future_question, "END2", suggested_protocol_pool,["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name,dof
      if self.yes_no_detection(message) == "NO":
        if dof == 0:
            future_question = self.embedding_generator(current_questions=self.data["thanks"])
            return future_question,"END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
        # elif dof == 1:
        future_question = self.embedding_generator(current_questions=self.data["thanks"])
        return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof
      return future_question,"PROTOCOL_SUGGESTING_AGAIN", suggested_protocol_pool, ["جی ہاں", "نہیں"], self.data["not_understanding"], addtional_num, name, dof
    # Protocol Suggesting

    elif state == "PROTOCOL_SUGGESTING3":
        if len(suggested_protocol_pool) > 0:
            if dof == 0:
                future_question = self.embedding_generator(current_questions=self.data["more_exercises"])
                return future_question, "PROTOCOL_SUGGESTING_AGAIN", suggested_protocol_pool, ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof
            # elif dof == 1:
            future_question = self.embedding_generator(current_questions=self.data["more_exercises"])
            return future_question, "PROTOCOL_SUGGESTING_AGAIN", suggested_protocol_pool, ["جی ہاں", "نہیں"], addtionals_lst, addtional_num, name, dof,
        else:
            if dof == 0:
                future_question = self.embedding_generator(current_questions=self.data["thanks"])
                return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
            # elif dof == 1:
            future_question = self.embedding_generator(current_questions=self.data["thanks"])
            return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,

    elif state == "END":
        if dof == 0:
            future_question = self.embedding_generator(current_questions=self.data["thanks"])
            return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
      # elif dof == 1:
        future_question = self.embedding_generator(current_questions=self.data["thanks"])
        return future_question, "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,

    # End of Conversation
    elif state == "END2":
        return "مجھے امید ہے کہ میں آپ کی مدد کر سکتا ہوں۔", "END2", suggested_protocol_pool, ["شکریہ", "شکر گزار"], addtionals_lst, addtional_num, name, dof,
    future_question = self.random_generator(self.data["greeting"])
    return future_question, "FORMALITY", suggested_protocol_pool, ["ہیلو", "ہیلو"], addtionals_lst, addtional_num, name, dof



